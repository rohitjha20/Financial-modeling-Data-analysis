Query 1: Analyze the customer segmentation based on purchase time-line

Filter the distinct customers who made the purchases after "2013-06" as
"recent customer" and only in between [2013-01 to 2013-06] as
"potential customer" and only in between [2011-01 to 2012-12] as "standard customer"
and only before "2011-01" as "losing customer" and check for any abnormalities
and list them under "unknown customer" if present.

Then return a count on each type of customer

Note:
For example a standard customer must have made at least one purchase in between
[2011-01 to 2012-12] only and must not have made any purchases after "2012-12"
or before "2011-01" which comes under other time-line/segmentation.
*/

/*
time-line               customer type

> 2013-06               recent customers
> 2012-12               t1
2011-01 to 2012-12      all standard customers
> 2010-12               t2
< 2011-01               all losing customers


potential customers    =    t1 - recent customers
standard customers     =    all standard customers - t1
losing customers       =    all losing customers - t2
*/
/*--------------------------------QUERY 1 START-------------------------------*/

WITH all_recent_customers
AS (SELECT
  c.CustomerId,
  c.FirstName,
  c.LastName,
  STRFTIME('%Y-%m', i.InvoiceDate) AS ord_date,
  COUNT(*) AS purchases
FROM Customer c
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
GROUP BY 1,
         2,
         3,
         4
HAVING STRFTIME('%Y-%m', i.InvoiceDate) > "2013-06"
ORDER BY 4,
         1),

t1
AS (SELECT
  c.CustomerId,
  c.FirstName,
  c.LastName,
  STRFTIME('%Y-%m', i.InvoiceDate) AS ord_date,
  COUNT(*) AS purchases
FROM Customer c
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
GROUP BY 1,
         2,
         3,
         4
HAVING STRFTIME('%Y-%m', i.InvoiceDate) > "2012-12"
ORDER BY 4,
         1),

all_standard_customers
AS (SELECT
  c.CustomerId,
  c.FirstName,
  c.LastName,
  STRFTIME('%Y-%m', i.InvoiceDate) AS ord_date,
  COUNT(*) AS purchases
FROM Customer c
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
GROUP BY 1,
         2,
         3,
         4
HAVING STRFTIME('%Y-%m', i.InvoiceDate) BETWEEN "2011-01" AND "2012-12"
ORDER BY 4,
         1),

t2
AS (SELECT
  c.CustomerId,
  c.FirstName,
  c.LastName,
  STRFTIME('%Y-%m', i.InvoiceDate) AS ord_date,
  COUNT(*) AS purchases
FROM Customer c
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
GROUP BY 1,
         2,
         3,
         4
HAVING STRFTIME('%Y-%m', i.InvoiceDate) > "2010-12"
ORDER BY 4,
         1),

all_losing_customers
AS (SELECT
  c.CustomerId,
  c.FirstName,
  c.LastName,
  STRFTIME('%Y-%m', i.InvoiceDate) AS ord_date,
  COUNT(*) AS purchases
FROM Customer c
JOIN Invoice i
  ON c.CustomerId = i.CustomerId
GROUP BY 1,
         2,
         3,
         4
HAVING STRFTIME('%Y-%m', i.InvoiceDate) < "2011-01"
ORDER BY 4,
         1),

recent_customers
AS (SELECT DISTINCT
  arc.CustomerId,
  arc.FirstName,
  arc.LastName
FROM all_recent_customers arc
ORDER BY 1,
         2,
         3),

potential_customers
AS (SELECT DISTINCT
  t1.CustomerId,
  t1.FirstName,
  t1.LastName
FROM t1
LEFT JOIN all_recent_customers arc
  ON t1.CustomerId = arc.CustomerId
  AND t1.FirstName = arc.FirstName
  AND t1.LastName = arc.LastName
WHERE arc.CustomerId IS NULL
ORDER BY 1,
         2,
         3),

standard_customers
AS (SELECT DISTINCT
  alsc.CustomerId,
  alsc.FirstName,
  alsc.LastName
FROM all_standard_customers alsc
LEFT JOIN t1
  ON alsc.CustomerId = t1.CustomerId
  AND alsc.FirstName = t1.FirstName
  AND alsc.LastName = t1.LastName
WHERE t1.CustomerId IS NULL
ORDER BY 1,
         2,
         3),

losing_customers
AS (SELECT
  alc.CustomerId,
  alc.FirstName,
  alc.LastName
FROM all_losing_customers alc
LEFT JOIN t2
  ON alc.CustomerId = t2.CustomerId
  AND alc.FirstName = t2.FirstName
  AND alc.LastName = t2.LastName
WHERE t2.CustomerId IS NULL
ORDER BY 1,
         2,
         3),

all_customers_list
AS (SELECT
  c.CustomerId,
  c.FirstName,
  c.LastName,
  CASE
    WHEN c.CustomerId IN (SELECT
                            CustomerId
                          FROM recent_customers)
    THEN "recent customer"
    WHEN c.CustomerId IN (SELECT
                            CustomerId
                          FROM potential_customers)
    THEN "potential customer"
    WHEN c.CustomerId IN (SELECT
                            CustomerId
                          FROM standard_customers)
    THEN "standard customer"
    WHEN c.CustomerId IN (SELECT
                            CustomerId
                          FROM losing_customers)
    THEN "losing customer"
    ELSE "unknown customer"
  END AS customer_type
FROM Customer c
ORDER BY 1,
         2,
         3),

customer_segmentation
AS (SELECT
  CASE
    WHEN customer_type = "recent customer"
    THEN 1
    ELSE 0
  END AS recent_customer,
  CASE
    WHEN customer_type = "potential customer"
    THEN 1
    ELSE 0
  END AS potential_customer,
  CASE
    WHEN customer_type = "standard customer"
    THEN 1
    ELSE 0
  END AS standard_customer,
  CASE
    WHEN customer_type = "losing customer"
    THEN 1
    ELSE 0
  END AS losing_customer,
  CASE
    WHEN customer_type = "unknown customer"
    THEN 1
    ELSE 0
  END AS unknown_customer
FROM all_customers_list)

SELECT
  SUM(cg.recent_customer) AS recent_customers,
  SUM(cg.potential_customer) AS potential_customers,
  SUM(cg.standard_customer) AS standard_customers,
  SUM(cg.losing_customer) AS losing_customers,
  SUM(cg.unknown_customer) AS unknown_customers,
  (SELECT
    COUNT(*) AS all_customers
  FROM Customer c)
  AS total_customers
FROM customer_segmentation cg;

/*---------------------------------QUERY 1 END--------------------------------*/
/*
Output:
recent_customers    potential_customers     standard_customers    losing_customers    unknown_customers     total_customers
31	            15	                    13	                  0	              0	                    59
*/


Query 2: How many artists self composed their own songs and identify
the other options engaged to compose the songs
*/

/*--------------------------------QUERY 2 START-------------------------------*/

WITH composer_list
AS (SELECT
  ar.ArtistId,
  ar.Name AS artist_name,
  t.Composer
FROM Artist ar
JOIN Album al
  ON ar.ArtistId = al.ArtistId
JOIN Track t
  ON al.AlbumId = t.AlbumId
ORDER BY 1),

composer_employed
AS (SELECT
  ArtistId,
  artist_name,
  Composer,
  CASE
		WHEN artist_name = Composer
		THEN "self composer"
    WHEN Composer  LIKE (artist_name || "%")
		THEN "self composer"
    WHEN Composer  LIKE ("%" || artist_name)
		THEN "self composer"
    WHEN Composer  LIKE ("&" || artist_name || "%")
		THEN "self composer"
		WHEN artist_name LIKE (Composer || "%")
		THEN "self composer"
    WHEN artist_name LIKE ("%" || Composer)
		THEN "self composer"
    WHEN artist_name LIKE ("&" || Composer || "%")
		THEN "self composer"
		WHEN Composer IS NULL
		THEN "no composer"
    ELSE "outside composer"
	END AS composer_type
FROM composer_list
ORDER BY 4 DESC, 2),

composer_segmentation
AS (SELECT
  CASE
    WHEN composer_type = "self composer"
    THEN 1
    ELSE 0
  END AS self_composer,
  CASE
    WHEN composer_type = "outside composer"
    THEN 1
    ELSE 0
  END AS outside_composer,
  CASE
    WHEN composer_type = "no composer"
    THEN 1
    ELSE 0
  END AS no_composer
FROM composer_employed)

SELECT (SELECT
         COUNT(*)
       FROM composer_list)
       AS total_songs,
       SUM(self_composer) AS self_composed,
       SUM(outside_composer) AS outside_composed,
       SUM(no_composer) AS none_composed
FROM composer_segmentation;

/*---------------------------------QUERY 2 END--------------------------------*/
/*
Output:
total_songs		self_composed		outside_composed		none_composed
3503			524			2001				978
*/


Query 3: Find the most purchased song genre
*/

/*--------------------------------QUERY 3 START-------------------------------*/


SELECT
  g.Name AS genre_type,
  COUNT(*) AS num_purchases
FROM Genre g
JOIN Track t
  ON g.GenreId = t.GenreId
JOIN InvoiceLine il
  ON t.TrackId = il.TrackId
GROUP BY 1
ORDER BY 2 DESC;


/*---------------------------------QUERY 3 END--------------------------------*/
/*
Output:

genre_type             num_purchases
Rock	                 835
Latin	                 386
Metal	                 264
Alternative & Punk	 244
Jazz	                  80
Blues	                  61
TV Shows	          47
Classical	          41
R&B/Soul	          41
Reggae	                  30
Drama	                  29
Pop	                  28
Sci Fi & Fantasy	  20
Soundtrack	          20
Hip Hop/Rap	          17
Bossa Nova	          15
Alternative	          14
World	                  13
Electronica/Dance	  12
Heavy Metal	          12
Easy Listening	          10
Comedy	                   9
Rock And Roll	           6
Science Fiction	           6
*/


Query 4: Find the most popular artist and music genre
to organize a musical concert
*/

/*--------------------------------QUERY 4 START-------------------------------*/


WITH most_earned_artist
AS (SELECT
  ar.ArtistId,
  ar.Name AS artist_name,
  SUM(il.UnitPrice * il.Quantity) AS earned
FROM Artist ar
JOIN Album al
  ON ar.ArtistId = al.ArtistId
JOIN Track t
  ON al.AlbumId = t.AlbumId
JOIN InvoiceLine il
  ON t.TrackId = il.TrackId
GROUP BY 1,
         2
ORDER BY 3 DESC
LIMIT 1)

SELECT
  ar.ArtistId,
  ar.Name AS artist_name,
  g.Name AS genre_type,
  SUM(il.UnitPrice * il.Quantity) AS earned
FROM Artist ar
JOIN Album al
  ON ar.ArtistId = al.ArtistId
JOIN Track t
  ON al.AlbumId = t.AlbumId
JOIN Genre g
  ON t.GenreId = g.GenreId
JOIN InvoiceLine il
  ON t.TrackId = il.TrackId
WHERE ar.Name = (SELECT
  artist_name
FROM most_earned_artist)
GROUP BY 1,
         2,
         3
ORDER BY 4 DESC;


/*---------------------------------QUERY 4 END--------------------------------*/
/*
Output:

ArtistId		artist_name		genre_type		earned
90			Iron Maiden		Metal			69.3
90			Iron Maiden		Rock			53.46
90			Iron Maiden		Heavy Metal		11.88
90			Iron Maiden		Blues			3.96
*/
